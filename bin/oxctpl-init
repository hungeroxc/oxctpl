#!/usr/bin/env node

const program = require('commander')
const path = require('path')
const fs = require('fs')
const glob = require('glob')
const inquirer = require('inquirer')
const chalk = require('chalk')

const download = require('./../lib/download')
const generator = require('./../lib/generator')

program
.usage('<project-name>')
.parse(process.argv)

const projectName = program.args[0]

// projectName必填
if(!projectName) {
    program.help()
}

// 路径和目录判断
// 遍历当前目录
const list = glob.sync('*')
// 获取当前目录名字  process.cwd()获取进程的当前工作目录
let rootName = path.basename(process.cwd())
let next = undefined

// 如果当前目录不为空/当前目录名字等于项目名字
if(!!list.length) {
    // 获取当前目录下是否存在和项目名字相同的文件夹
    const sameNameArray = list.filter(name => {
        const fileName = path.resolve(process.cwd(), path.join('.', name))
        const isDir = fs.statSync(fileName).isDirectory()
        return name.indexOf(projectName) !== -1 && isDir
    })
    // 存在相同目录的同时退出进程
    if(sameNameArray.length > 0) {
        console.log(`项目${projectName}已经存在`)
        process.exit()
    }
    // 不存在时处理, 此为正常情况
    next = Promise.resolve(projectName)
} else if(rootName === projectName) {
    // 如果当前目录名称和项目名相同，则在改目录下生成项目
    next = inquirer.prompt([
        {
            name: 'buildInCurrent',
            message: '当前目录为空，且目录名称和项目名称相同，是否直接在当前目录下创建新项目？',
            type: 'confirm'
        }
    ]).then(answer => {
        return Promise.resolve(answer.buildInCurrent ? '.' : projectName)
    })
} else {
    // 正常情况
    next = Promise.resolve(projectName)
}


next && go()

function go() {
    next.then(projectName => {
        // 创建隐藏文件夹，并将模板下载至该文件夹
        if(projectName !== '.') {
            fs.mkdirSync(projectName)
        }
        return download(projectName).then(target => {
            return {
                name: projectName,
                downloadTemp: target
            }
        })
    }).then(context => {
        // 填入基础信息
        return inquirer.prompt([
            {
                name: 'projectName',
                message: '项目名称',
                default: context.name
            },
            {
                name: 'projectVersion',
                message: '项目的版本号',
                default: '1.0.0'
            },
            {
                name: 'projectDescription',
                message: '项目的简介',
                default: `A project named ${context.name}`
            }
        ]).then(answers => {
            const info = {
                ...context,
                metadata: { ...answers }
            }
            return generator(info.metadata, info.downloadTemp, path.parse(info.downloadTemp).dir)
        }).then(context => {
            console.log('创建成功')
            console.log()
            // @ts-ignore
            console.log(chalk.green('cd ' + context.dest + '\nnpm i\nnpm run dev'))
        }).catch(err => {
            // @ts-ignore
            console.log(chalk.red(`found faild：${err.message}`))
        })
    })

}

